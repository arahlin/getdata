.\" gd_sarrays.3.  The gd_sarrays man page.
.\"
.\" Copyright (C) 2010, 2011, 2016 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH gd_sarrays 3 "22 November 2016" "Version 0.10.0" "GETDATA"
.SH NAME
gd_sarrays, gd_msarrays \(em retrieve a list of SARRAY values from a dirfile
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "const char ***gd_sarrays(DIRFILE *" dirfile );
.HP
.BI "const char ***gd_msarrays(DIRFILE *" dirfile ", const char"
.BI * parent );
.hy
.ad n
.SH DESCRIPTION
The
.BR gd_sarrays ()
function queries a dirfile(5) database specified by
.I dirfile
and generates a read-only list of values of the all top-level
.B SARRAY
fields defined in the database, after type conversion to the data type
specified by
.IR return_type .
For a list of valid symbols to use for
.IR return_type ,
see the
.BR gd_get_sarray (3)
manual page.  

The
.BR gd_msarrays ()
function behaves similarly, but creates a list of values of
.B SARRAY
subfields under the parent field
.IR parent .

The 
.I dirfile
argument must point to a valid DIRFILE object previously created by a call to
.BR gd_open (3).

The array returned will be de-allocated by a call to
.BR gd_close (3)
and should not be de-allocated by the caller.  The list returned should not be
assumed to be in any particular order, except that it is guaranteed to be in the
same order as the list of
.B SARRAY
fields returned by
.BR gd_field_list_by_type (3)
or
.BR gd_mfield_list_by_type (3).
The number of values in the array can be obtained from a call to
.BR gd_nfields_by_type (3)
or
.BR gd_nmfields_by_type (3).

The caller may not modify any values in the array, nor the array itself.  Doing
so may cause database corruption.  The pointer returned is guaranteed to be
valid only until the function is called again with the same arguments, or until
the dirfile's metadata is modified (by adding, modifying or deleting an entry),
or until the array is de-allocated by a call to
.BR gd_close (3)
or
.BR gd_discard (3).

A corresponding list of names for these fields may be obtained by calling
.BR gd_field_list_by_type (3)
or
.BR gd_mfield_list_by_type (3).

.SH RETURN VALUE
Upon successful completion,
.BR gd_sarrays ()
and
.BR gd_msarrays (3)
return a pointer to an array of arrays of strings.  For convenience, both
levels of the array are terminated by NULL pointers.

If no SARRAYs are defined in the database, a pointer to a single-element array
containing only the terminating NULL is returned.

On error,
.BR gd_sarrays ()
returns NULL and stores a negative-valued error code in the
.B DIRFILE
object which may be retrieved by a subsequent call to
.BR gd_error (3).
Possible error codes are:
.TP 8
.B GD_E_ALLOC
The library was unable to allocate memory.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.TP
.B GD_E_INTERNAL_ERROR
An internal error occurred in the library while trying to perform the task.
This indicates a bug in the library.  Please report the incident to the
GetData developers.
.PP
A descriptive error string for the error may be obtained by calling
.BR gd_error_string (3).
.SH SEE ALSO
.BR dirfile (5),
.BR gd_error (3),
.BR gd_error_string (3),
.BR gd_field_list_by_type (3),
.BR gd_get_sarray (3),
.BR gd_mfield_list_by_type (3),
.BR gd_nfields_by_type (3),
.BR gd_nmfields_by_type (3),
.BR gd_open (3)
