.\" gd_get_string.3.  The gd_get_string man page.
.\"
.\" Copyright (C) 2008, 2009, 2010, 2016 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH gd_get_string 3 "22 November 2016" "Version 0.10.0" "GETDATA"
.SH NAME
gd_get_string \(em retrieve STRING or SARRAY data from a dirfile database
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "size_t gd_get_string(DIRFILE *" dirfile ", const char *" field_code ,
.BI "size_t " len ", char *" data_out );
.hy
.ad n
.SH DESCRIPTION
The
.BR gd_get_string ()
function queries a dirfile(5) database specified by
.I dirfile
for the string scalar
.IR field_code ,
which should not contain a representation suffix.  The first
.I len
characters of the string scalar are stored in the user-supplied buffer
.IR data_out .
If
.I field_code
refers to a
.B SARRAY
field, the first element is returned.

The 
.I dirfile
argument must point to a valid DIRFILE object previously created by a call to
.BR gd_open (3).

If
.I len
equals zero, or if
.I data_out
equals NULL, no data will be copied to
.IR data_out ,
but the length of the string scalar will still be returned by
.BR gd_get_string ().
Otherwise, the argument
.I data_out
must point to a valid memory location of sufficient size to hold at least
.I len
characters.  If the length of the string scalar is greater than
.IR len ", " data_out
will not be NUL-terminated.

The
.BR gd_get_sarray (3)
function provides another way of retrieving
.B STRING
data, but without having to know the length of the returned string in advance.
The code:

.RS
.nh
.ad l
.BI "size_t " len " = gd_get_string(" dirfile ", " field_code ", 0, NULL);"
.br
.BI "char *" string " = malloc(" len );
.br
.BI gd_get_string( dirfile ", " field_code ", " len ", " string );
.hy
.ad n
.RE

which ensures the whole string, including the terminating NUL, is returned, can
be replaced with, simply:

.RS
.nh
.ad l
.BI "const char *" string;
.br
.BI gd_get_sarray( dirfile ", " field_code ", &" string );
.hy
.ad n
.RE

with the added benefit of not having manage the memory for the string.

.SH RETURN VALUE
On success,
.BR gd_get_string ()
returns the actual length of the specified string scalar, including space for
the trailing NUL-character.  A return value greater than
.I len
indicates that the output string is not NUL-terminated.

On error, this function returns 0 and stores a negative-valued error code in the
.B DIRFILE
object which may be retrieved by a subsequent call to
.BR gd_error (3).
Possible error codes are:
.TP 8
.B GD_E_BAD_CODE
The field specified by
.I field_code
was not found in the database.
.TP
.B GD_E_BAD_DIRFILE
An invalid
.I dirfile
was supplied.
.TP
.B GD_E_BAD_FIELD_TYPE
The supplied
.I field_code
referred to a field of type other than
.B STRING
or
.BR SARRAY .
.TP
.B GD_E_INTERNAL_ERROR
An internal error occurred in the library while trying to perform the task.
This indicates a bug in the library.  Please report the incident to the
maintainer.
.PP
A descriptive error string for the error may be obtained by calling
.BR gd_error_string (3).
.SH SEE ALSO
.BR dirfile (5),
.BR gd_get_sarray (3),
.BR gd_error (3),
.BR gd_error_string (3),
.BR gd_open (3),
.BR gd_put_string (3)
